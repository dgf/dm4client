// Generated by CoffeeScript 1.3.3
(function() {
  var DEL, GET, POST, PUT, assocDefChildTypes, associationEndpoint, associationInfo, async, clarifyParents, createChildTypes, createOnComplete, dataTypeUri, defaultIcon, detachAsscociation, detachComposite, detachDataType, detachTopic, detachType, fetchComposite, http, iconUri, isChildType, rest, topicEndpoint, topicInfo, topicsByType, typeInfo, typesEndpoint, url, util, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  rest = require('restler');

  async = require('async');

  http = require('http');

  url = require('url');

  util = require('util');

  createOnComplete = function(onSuccess, onError, errorMessage) {
    return function(result, response) {
      if (result instanceof Error) {
        return onError(510, result);
      } else if (response.statusCode === 200) {
        return onSuccess(result);
      } else {
        return onError(response.statusCode, new Error(errorMessage));
      }
    };
  };

  GET = function(getUrl, options, onSuccess, onError) {
    var onComplete;
    if (onError == null) {
      onError = function(status, error) {
        throw error;
      };
    }
    onComplete = createOnComplete(onSuccess, onError, "requesting " + getUrl + " failed");
    return rest.get(getUrl, _.clone(options)).on('complete', onComplete);
  };

  DEL = function(delUrl, options, onSuccess, onError) {
    var onComplete;
    if (onError == null) {
      onError = function(status, error) {
        throw error;
      };
    }
    onComplete = createOnComplete(onSuccess, onError, "deleting " + delUrl + " failed");
    return rest.del(delUrl, _.clone(options)).on('complete', onComplete);
  };

  POST = function(postUrl, data, options, onSuccess, onError) {
    var onComplete;
    if (onError == null) {
      onError = function(status, error) {
        throw error;
      };
    }
    onComplete = createOnComplete(onSuccess, onError, "posting to " + postUrl + " failed");
    return rest.postJson(postUrl, data, _.clone(options)).on('complete', onComplete);
  };

  PUT = function(putUrl, data, options, onSuccess, onError) {
    var onComplete, putOptions;
    if (onError == null) {
      onError = function(status, error) {
        throw error;
      };
    }
    putOptions = _.extend({
      data: JSON.stringify(data)
    }, options);
    onComplete = createOnComplete(onSuccess, onError, "put to " + putUrl + " failed");
    return rest.put(putUrl, putOptions).on('complete', onComplete);
  };

  dataTypeUri = 'dm4.core.data_type';

  iconUri = 'dm4.webclient.icon';

  assocDefChildTypes = ['dm4.core.aggregation_def', 'dm4.core.composition_def'];

  associationEndpoint = 'core/association';

  associationInfo = associationEndpoint + '/';

  topicEndpoint = 'core/topic';

  topicInfo = topicEndpoint + '/';

  topicsByType = topicEndpoint + '/by_type/';

  fetchComposite = '?fetch_composite=true';

  typesEndpoint = 'core/topictype';

  typeInfo = typesEndpoint + '/';

  defaultIcon = 'de.deepamehta.webclient/images/ball-gray.png';

  detachDataType = function(t) {
    return {
      name: t.value,
      uri: t.uri
    };
  };

  isChildType = function(assoc_def) {
    var _ref;
    if (_ref = assoc_def.assoc_type_uri, __indexOf.call(assocDefChildTypes, _ref) >= 0) {
      return true;
    }
  };

  createChildTypes = function(assoc_defs) {
    var assoc_def, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = assoc_defs.length; _i < _len; _i++) {
      assoc_def = assoc_defs[_i];
      if (isChildType(assoc_def)) {
        _results.push(assoc_def.uri);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  detachComposite = function(composite) {
    var part, typeUri, _results;
    _results = [];
    for (typeUri in composite) {
      part = composite[typeUri];
      _results.push(detachTopic(part));
    }
    return _results;
  };

  detachAsscociation = function(association) {
    return _.extend(detachTopic(association), {
      roles: [
        {
          id: association.role_1.topic_id,
          type: association.role_1.topic_id
        }, {
          id: association.role_2.topic_id,
          type: association.role_2.topic_id
        }
      ]
    });
  };

  detachTopic = function(topic) {
    return {
      id: topic.id,
      type: topic.type_uri,
      uri: topic.uri,
      value: topic.value,
      composite: detachComposite(topic.composite)
    };
  };

  detachType = function(type) {
    var vc, _i, _len, _ref, _ref1, _ref2;
    _ref = type.view_config_topics;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      vc = _ref[_i];
      type.icon = (_ref1 = vc.composite) != null ? (_ref2 = _ref1[iconUri]) != null ? _ref2.value : void 0 : void 0;
    }
    return {
      id: type.id,
      name: type.value,
      uri: type.uri,
      dataType: type.data_type_uri,
      childTypes: createChildTypes(type.assoc_defs),
      icon: typeof type.icon === "function" ? type.icon(defaultIcon) : void 0
    };
  };

  clarifyParents = function(types) {
    var child, parentsByChild, type, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref;
    parentsByChild = {};
    for (_i = 0, _len = types.length; _i < _len; _i++) {
      type = types[_i];
      parentsByChild[type.uri] = [];
    }
    for (_j = 0, _len1 = types.length; _j < _len1; _j++) {
      type = types[_j];
      _ref = type.childTypes;
      for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
        child = _ref[_k];
        parentsByChild[child].push(type.uri);
      }
    }
    for (_l = 0, _len3 = types.length; _l < _len3; _l++) {
      type = types[_l];
      type.parentTypes = parentsByChild[type.uri];
    }
    return types;
  };

  exports.create = function(serverUrl) {
    var associationCreateUrl, associationUrl, getTypeInfos, httpOptions, restOptions, topicCreateUrl, topicUrl, topicsUrl, typeUrl, typesUrl;
    if (serverUrl == null) {
      serverUrl = 'http://localhost:8080/';
    }
    httpOptions = url.parse(serverUrl);
    restOptions = {};
    associationCreateUrl = serverUrl + associationEndpoint;
    associationUrl = function(id) {
      return serverUrl + associationInfo + id;
    };
    topicCreateUrl = serverUrl + topicEndpoint;
    topicUrl = function(id) {
      return serverUrl + topicInfo + id;
    };
    topicsUrl = function(uri) {
      return serverUrl + topicsByType + uri + fetchComposite;
    };
    typesUrl = serverUrl + typesEndpoint;
    typeUrl = function(uri) {
      return serverUrl + typeInfo + uri;
    };
    getTypeInfos = function(types, onSuccess, onError) {
      var getTypeInfo, typeInfos;
      if (onError == null) {
        onError = function(error) {
          throw error;
        };
      }
      typeInfos = [];
      getTypeInfo = function(uri, callback) {
        var addTypeInfo;
        addTypeInfo = function(type) {
          typeInfos.push(type);
          return callback();
        };
        return GET(typeUrl(uri), restOptions, addTypeInfo, onError);
      };
      return async.forEachLimit(types, 10, getTypeInfo, function(err) {
        if (err != null) {
          return onError(new Error(err));
        } else {
          return onSuccess(typeInfos);
        }
      });
    };
    return {
      createAssociation: function(association, onSuccess, onError) {
        return POST(associationCreateUrl, association, restOptions, onSuccess, onError);
      },
      createTopic: function(topic, onSuccess, onError) {
        return POST(topicCreateUrl, topic, restOptions, onSuccess, onError);
      },
      deleteAssociation: function(id, onSuccess, onError) {
        return DEL(associationUrl(id), restOptions, onSuccess, onError);
      },
      deleteTopic: function(id, onSuccess, onError) {
        return DEL(topicUrl(id), restOptions, onSuccess, onError);
      },
      getAssociation: function(id, onSuccess, onError) {
        var detach;
        detach = function(data) {
          return onSuccess(detachAsscociation(data));
        };
        return GET(associationUrl(id) + fetchComposite, restOptions, detach, onError);
      },
      getDataTypes: function(onSuccess, onError) {
        var detach;
        detach = function(data) {
          var t;
          return onSuccess((function() {
            var _i, _len, _ref, _results;
            _ref = data.items;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              t = _ref[_i];
              _results.push(detachDataType(t));
            }
            return _results;
          })());
        };
        return GET(topicsUrl(dataTypeUri), restOptions, detach, onError);
      },
      getResource: function(path, onSuccess, onError) {
        var handle, options;
        if (onError == null) {
          onError = function(status, error) {
            throw error;
          };
        }
        options = _.extend(httpOptions, {
          path: path
        });
        handle = function(response) {
          var rUrl;
          if (response.statusCode === 200) {
            return onSuccess(response);
          } else {
            rUrl = url.format(options);
            return onError(response.statusCode, new Error("requesting " + rUrl + " failed"));
          }
        };
        return http.get(options, handle).on('error', function(error) {
          return onError(500, error);
        });
      },
      getTopic: function(id, onSuccess, onError) {
        var detach;
        detach = function(data) {
          return onSuccess(detachTopic(data));
        };
        return GET(topicUrl(id) + fetchComposite, restOptions, detach, onError);
      },
      getTopics: function(uri, onSuccess, onError) {
        var detach;
        detach = function(data) {
          var t;
          return onSuccess((function() {
            var _i, _len, _ref, _results;
            _ref = data.items;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              t = _ref[_i];
              _results.push(detachTopic(t));
            }
            return _results;
          })());
        };
        return GET(topicsUrl(uri), restOptions, detach, onError);
      },
      getTypes: function(onSuccess, onError) {
        var getAndDetachInfos;
        getAndDetachInfos = function(data) {
          var detach;
          detach = function(typeInfos) {
            var t;
            return onSuccess(clarifyParents((function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = typeInfos.length; _i < _len; _i++) {
                t = typeInfos[_i];
                _results.push(detachType(t));
              }
              return _results;
            })()));
          };
          return getTypeInfos(data, detach, onError);
        };
        return GET(typesUrl, restOptions, getAndDetachInfos, onError);
      },
      login: function(user, password, onSuccess, onError) {
        var loginOptions, loginRequest;
        if (onError == null) {
          onError = function(status, error) {
            throw error;
          };
        }
        loginOptions = {
          auth: user + ':' + password,
          method: 'POST'
        };
        _.extend(loginOptions, httpOptions, {
          path: '/accesscontrol/login'
        });
        loginRequest = http.request(loginOptions, function(response) {
          var sessionId;
          if (response.statusCode !== 204) {
            return onError(response.statusCode, new Error("login " + user + " failed"));
          } else {
            sessionId = response.headers['set-cookie'][0].replace(/;Path.*/, '');
            _.extend(httpOptions, {
              headers: {
                Cookie: sessionId
              }
            });
            _.extend(restOptions, {
              headers: {
                Cookie: sessionId
              }
            });
            return onSuccess(sessionId);
          }
        });
        loginRequest.on('error', function(e) {
          return onError(500, e.message);
        });
        return loginRequest.end();
      },
      openSpace: function(uri, onSuccess, onError) {
        var updateCookie;
        updateCookie = function(data) {
          httpOptions.headers.Cookie += '; dm4_workspace_id=' + data.id;
          restOptions.headers.Cookie += '; dm4_workspace_id=' + data.id;
          return onSuccess(data.id);
        };
        return GET(topicUrl('by_value/uri/' + uri), restOptions, updateCookie, onError);
      },
      updateAssociation: function(association, onSuccess, onError) {
        return PUT(associationCreateUrl, association, restOptions, onSuccess, onError);
      },
      updateTopic: function(topic, onSuccess, onError) {
        return PUT(topicCreateUrl, topic, restOptions, onSuccess, onError);
      }
    };
  };

}).call(this);
